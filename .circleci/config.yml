# This is a continuous build CircleCI configuration for a Docker container
# intended to bulid on CircleCI to spread out testing over Travis/Circle.
# The container is built and pushed to the CONTAINER_NAME variable
# defined here or within the CircleCI settings. The following environment
# variables are acceptable here or in these settings (for sensitive information)
#
# CONTAINER_NAME if not set, will use Github repo and organization name
# DOCKER_USER
# DOCKER_EMAIL
# Dockerfile optional, if the path is different than the Dockerfile in $PWD

################################################################################
# Functions
################################################################################

# Defaults

defaults: &defaults
  docker:
    - image: docker:18.01.0-ce-git
  working_directory: /tmp/src

# Installation

install: &install
    name: Install parallel gzip, gettext, python3, and jq
    command: apk add --no-cache pigz python3 gettext jq

# Environment

sourceenv: &sourceenv
    name: Source environment variables from the BASH_ENV
    command: source $BASH_ENV


# Docker

dockerenv: &dockerenv
    name: Define container and Docker names
    command: |
        # If not set, define DOCKER_TAG
        # Primary Container
        if [ ! -n "${DOCKER_TAG:-}" ]; then
            DOCKER_TAG=$(echo "${CIRCLE_SHA1}" | cut -c1-10)
        fi
        # If not set, define CONTAINER_NAME
        if [ ! -n "${CONTAINER_NAME:-}" ]; then
            CONTAINER_NAME="${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}"
        fi
        # If not set, define Dockerfile to be in $PWD
        if [ ! -n "${DOCKERFILE:-}" ]; then
            DOCKERFILE=Dockerfile
        fi
        REPO_NAME=/tmp/src
        # Set the version from VERSION
        CONTAINER_VERSION=$(cat $REPO_NAME/VERSION)
        echo "Container name is ${CONTAINER_NAME}"
        # export to bash environment
        echo "export CONTAINER_NAME=${CONTAINER_NAME}" >> ${BASH_ENV}
        echo "export DOCKER_TAG=${DOCKER_TAG}" >> ${BASH_ENV}
        echo "export REPO_NAME=${REPO_NAME}" >> ${BASH_ENV}
        echo "export CONTAINER_VERSION=${CONTAINER_VERSION}" >> ${BASH_ENV}
        echo "export DOCKERFILE=${DOCKERFILE}" >> ${BASH_ENV}
        cat ${BASH_ENV}


dockerload: &dockerload
    name: Load Docker container Image
    no_output_timeout: 30m
    command: |
      echo "Working directory is ${PWD}"
      docker info
      set +o pipefail
      if [ -f /tmp/cache/container.tar.gz ]; then
          apk update && apk add --no-cache pigz curl curl-dev
          pigz -d --stdout /tmp/cache/container.tar.gz | docker load
      fi
      if [ -f /tmp/cache/nginx.tar.gz ]; then
          apk update && apk add --no-cache pigz curl curl-dev
          pigz -d --stdout /tmp/cache/nginx.tar.gz | docker load
          docker images
      fi
      docker images


dockersave: &dockersave
    name: Docker Save
    no_output_timeout: 40m
    command: |
        source ${BASH_ENV}
        echo "Saving ${CONTAINER_NAME}:${DOCKER_TAG} to container.tar.gz"
        mkdir -p /tmp/cache
        docker save ${CONTAINER_NAME}:${DOCKER_TAG} \
          | pigz -2 -p 3 > /tmp/cache/container.tar.gz
        echo "Saving ${CONTAINER_NAME}_nginx:${DOCKER_TAG} to nginx.tar.gz"
        docker save ${CONTAINER_NAME}_nginx:${DOCKER_TAG} \
          | pigz -2 -p 3 > /tmp/cache/nginx.tar.gz

dockerdeploy: &dockerdeploy
    name: Deploy to Docker Hub
    no_output_timeout: 40m
    command: |
      source ${BASH_ENV}
      docker images
      echo "Container name set to ${CONTAINER_NAME}:${DOCKER_TAG}"
      if [[ -n "$DOCKER_PASS" ]]; then
            docker login -u $DOCKER_USER -p $DOCKER_PASS
            # Primary Container
            echo "Tagging latest image..."
            docker tag ${CONTAINER_NAME}:${DOCKER_TAG} ${CONTAINER_NAME}:latest
            echo "Tagging version..."
            docker tag ${CONTAINER_NAME}:${DOCKER_TAG} ${CONTAINER_NAME}:${CONTAINER_VERSION}
            docker push ${CONTAINER_NAME}
            # Nginx Container
            docker tag ${CONTAINER_NAME}_nginx:${DOCKER_TAG} ${CONTAINER_NAME}_nginx:latest
            docker tag ${CONTAINER_NAME}_nginx:${DOCKER_TAG} ${CONTAINER_NAME}_nginx:${CONTAINER_VERSION}
            docker push ${CONTAINER_NAME}_nginx
      fi

dockerbuild: &dockerbuild
    name: Build development Docker container
    command: |
      source ${BASH_ENV}
      echo "Building ${CONTAINER_NAME}:${DOCKER_TAG}"
      docker build -f ${DOCKERFILE} -t ${CONTAINER_NAME}:${DOCKER_TAG} .

dockernginx: &dockernginx
    name: Build nginx custom container
    command: |
      source ${BASH_ENV}
      echo "Building ${CONTAINER_NAME}_nginx:${DOCKER_TAG}"
      cd ${REPO_NAME}/nginx && \
      ls && \
      docker build -f ${DOCKERFILE} -t ${CONTAINER_NAME}_nginx:${DOCKER_TAG} .

################################################################################
# Jobs
################################################################################


version: 2
jobs:
  build:
    <<: *defaults
    steps:
      - checkout
      - run: *install
      - restore_cache:
          keys:
            - docker-v1-{{ .Branch }}
          paths:
            - /tmp/cache
      - setup_remote_docker
      - run: *dockerenv
      - run: *dockerbuild
      - run: *dockernginx
      - run: *dockersave
      - persist_to_workspace:
          root: /tmp
          paths:
            - cache/container.tar.gz
            - cache/nginx.tar.gz
            - src

  update_cache:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /tmp
      - save_cache:
         key: docker-v1-{{ .Branch }}
         paths:
            - /tmp/cache/container.tar.gz
            - /tmp/cache/nginx.tar.gz

  deploy:
    <<: *defaults
    steps:
      - attach_workspace:
          at: /tmp
      - setup_remote_docker
      - run: *dockerenv
      - run: *dockerload
      - run: *dockerdeploy


################################################################################
# Workflows
################################################################################


workflows:
  version: 2
  build_deploy:
    jobs:
      - build:
          filters:
            branches:
              ignore:
                - gh-pages
                - /docs?/.*/
                - contributors/*
            tags:
              only: /.*/

      - update_cache:
          requires:
            - build
          filters:
            branches:
              ignore:
                - gh-pages
                - /docs?/.*/
                - contributors/*
            tags:
              only: /.*/

      # Upload the container to Docker Hub
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: master
            tags:
              only: /.*/
